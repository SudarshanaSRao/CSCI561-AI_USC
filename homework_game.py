# -*- coding: utf-8 -*-
"""game.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_09_juCSW3exX_x-sX446t3SKCEdhzlr
"""

import numpy as np
import time

class pente_game(object):
    
    def __init__(self):
        self.board = np.zeros((19, 19))
        self.player = 1
        self.winner = 0
        self.game_over = False
        self.n_in_row = 5
        self.action_size = 19 * 19
        self.state_size = 19 * 19 * 2
        self.last_move = -1
    
    def out_of_bounds(self, i, j):
        return i < 0 or i >= 19 or j < 0 or j >= 19
    
    def read (self, action):
        self.board[action // 19, action % 19] = self.player
        self.player = -1 if self.player == 1 else 1
        self.last_move = action
        self.winner = self.get_winner()
        self.game_over = self.winner != 0
        return self.get_state(), self.winner, self.game_over
    
    def all(self, iterable):
        for element in iterable:
            if not element:
                return False
        return True

    def read_file(self):
        with open('input.txt', 'r') as f:
            
            for line in f:
                data = f.readlines()
                
                for line in data:
                    line = line.strip()

                    if line == 'reset':
                        self.reset()
                        break
                    
                    if type(line) == int:
                        self.read(int(line))
                        break
        return self.get_state(), self.winner, self.game_over

    def play(self, action):
        self.update(action)
        self.last_move = action
        self.winner = self.get_winner()
        self.game_over = self.winner != 0
        return self.get_state(), self.winner, self.game_over
    
    def time(self):
        return time.time()
    
    def reset(self):
        self.board = np.zeros((19, 19))
        self.player = 1
        self.winner = 0
        self.game_over = False
        self.last_move = -1
        return self.get_state()

    def get_state(self):
        s = np.zeros((19, 19, 2))
        s[:, :, 0] = (self.board == 1)
        s[:, :, 1] = (self.board == -1)
        return s

    def get_valid_moves(self):
        valid_moves = []
        
        for i in range(19):
            
            for j in range(19):
                
                if self.board[i, j] == 0:
                    valid_moves.append(i * 19 + j)
        
        return valid_moves

    def update(self, action):
        self.board[action // 19, action % 19] = self.player
        self.player = -1 if self.player == 1 else 1

    def get_winner(self):
        
        for i in range(19):
            
            for j in range(19):
                
                if self.board[i, j] == 0:
                    continue
                player = self.board[i,j]
                # check horizontal
                if j in range(15):
                    if all(self.board[i, j + k] == player for k in range(1, self.n_in_row)):
                        return player
                # check vertical
                if i in range(15):
                    if all(self.board[i + k, j] == player for k in range(1, self.n_in_row)):
                        return player
                # check diagonal
                if i in range(15) and j in range(15):
                    if all(self.board[i + k, j + k] == player for k in range(1, self.n_in_row)):
                        return player
                # check anti-diagonal
                if i in range(15) and j in range(4, 19):
                    if all(self.board[i + k, j - k] == player for k in range(1, self.n_in_row)):
                        return player
        
        if len(self.get_valid_moves()) == 0:
            return -1
        
        return 0
    
    def write_file(self):
        with open('output.txt', 'w') as f:
            f.write(str(self.last_move)) 
    
    def main(self):
        self.reset()
        self.read_file()
        self.write_file()

if __name__ == '__main__':
    game = pente_game()
    game.main()